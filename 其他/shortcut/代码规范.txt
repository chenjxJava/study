1.@override报错，java jdk为1.5版以下

2.建表规范
强制	1,表达是否概念  is_xxx

	2,表名、字段名必须使用小写字母或数字

	3,表名不能使用复数名词
	
	4,禁用保留字，desc,range.,match,delayed
	
	5,索引命名，uk_ unique key唯一索引，idx_ index 普通索引
	
	6,小数类型为decimal，禁止使用float和double
	
	7,存储的字符串长度相等，使用char并给出指定长度
	
	8,varchar是可变长字符串，长度不能超过5000
	
	9,表必备三字段,id,gmt_create,gmt_modified
		id为主键，类型为unsigned bigint，单表时自增、不成为1。gmt_create，gmt_modified的类型均为date_time
推荐	
	10,表名为 业务名称_表的作用
		tiger_task / tiger_reader / mpp_config
	
	11,库名和应用名称尽量一致
	
	12，字段允许适当冗余，提高性能。条件：
		1）不是频繁修改的字段
		2）不是varchar超长字段，更不能text字段
	例如:商品类目名称，使用频率高，字段长度短，名称几乎不变，可进行冗余。
	
	13,单表行数超过500w行或者超过2GB，才推荐分库分表（3年内）
参考	
	14,合适的字符存储长度，不但节约数据库表空间，节约索引存储
	例如：	人的年龄	tinyint
		海龟的年龄	smallint
		太阳的年龄	int
		所用恒星的年龄	bigint
3.索引规约
强制	1,业务上具有唯一特性的字段，即使是组合字段，也必须建立唯一索引
		影响insert速度，可忽略不计，但是没有唯一索引，根据墨菲定律，必然有脏数据
	
	2，超过三个表禁止join。需要join的字段，数据类型保持绝对一致，多表关联查询时，保证
	被关联的字段需要有索引。（即使双表join也要注意表索引，sql性能）
	
	3.varchar字段上建立索引，必须制定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度
		索引的长度和区分度是矛盾的，字符串数据，长度为20的索引，区分度会高达90%，使用count(distinct left(列名,索引长度))/count(*)的区分度来确定
	
	4,页面搜索严禁左模糊或者全模糊，就是like %问题
推荐	
	5,order by场景建立索引时，必须有序。
		正例:where a=? and b=? order by c;索引a_b_c
	索引中有范围查找，索引有序性无法使用。
		反例:WHERE a>10 ORDER BY b;索引a_b。
	
	6,利用覆盖索引来进行查询操作，来避免回表操作。
		想知道书中11章的标题，不需要翻开那页，看下目录就好。
		正例：能够建立索引的种类:主键索引，唯一索引，普通索引，而覆盖索引是一种查询的一种效果，用explain的结果，extra列会出现:using index.
	
	7.利用延时关联或者子查询优化超多分页场景。
		正例：先快速定位需要获取的id段，然后在关联：
		SELECT a.* FROM 表1 a,(select id from 表1 where 条件 LIMIT 100000,20) b where a.id = b.id;
	
	8,sql性能优化的目标 range < ref < consts
		1）consts 单表中最多只有一个匹配行（主键或者唯一索引），在优化阶段可读取到数据
		2）ref	  指的是使用普通的索引（normal index）
		3）range  对索引进行范围检测
	
	9.建立组合索引的时候，区分度最高的在最左边。
		正例:如果where a=? and b=?,a列的几乎接近于唯一值，那么只需要单建idx_a索引即可。
		注:存在非等号或等号混合判断条件时，在建立索引时，请把等号条件的列前置。如：where a>? and b=? 那么即使a的区分度更高，也必须把b放在索引的最前面
	
	10.创建索引误区：
		1）误认为一个查询就需要建一个索引。
		2）误认为索引会小号空间，严重拖慢更新和新增速度。
		3）误认为唯一索引一律需要在应用层通过“先查后查”方式解决。

4.SQL规约
强制	1.不要使用count(列名)或者count(常量)来代替count(*).count(*)就是SQL92定义的标准统计行数的语法
		count(*)会统计值为NULL的行，而count(列名)不会统计此列为NULL值的行。
	
	2.count(distinct col) 计算该列除NULL之外的不重复数量。
		注:count(col1, col2)如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0.
	
	3.当某一列的值全为NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题。
		正例：避免sum的NPE问题：SELECT IF(ISNULL(SUM(g),0,SUM(g))) FROM table;
	
	4.使用ISNULL()来判断是否为NULL值。注意：NULL与任何值的直接比较都为NULL.
	
	5.在代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句。
	
	6.不得使用外键和级联，以前外键概念必须在应用层解决。
	
	7.禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。
	
	8.数据订正时，删除和修改记录时，要先select，避免出现误删除，确认无误才能执行更新语句。
推荐	
	9.in操作能避免则避免，实在避免不了仔细评估后面的集合元素数据，控制在1000个之内。
参考	
	10.如果有全球化需要，所有的字符存储与表示，均以utf-8编码，那么字符计数方法。
		注：
			SELECT LENGTH("轻松工作")；返回12
			SELECT CHARACTER_LENGTH("轻松工作")；返回4
		如果使用表情，那么使用utfmb4来进行存储，注意和utf-8编码的区别。
	
	11.开发中不适用TRUNCATE TABLE语句
		说明：TRUNCATE TABLE 比DELECT 速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发trigger。有可能造成事故。

5.ORM规约
	1.不要是用SELECT *
	
	2.POJO类的boolean属性不能加is，而数据库字段必须加is_,resultMap中进行映射
	
	3.不要用resultClass当做返回参数。
	
	4.使用#{}，不要使用${}--sql注入问题
	
	5.不使用iBATIS自带的queryForList(String statementName,int start,int size)
	
	6.不允许直接拿HashMap与Hashtable作为查询结果集的输出。
	
	7.更新数据表记录时，必须同时更新记录对应的gmt_modified字段值为当前时间。
	
	8.执行sql时，尽量不要更新无改动的字段。
		一是易出错，二是效率低，三是binlog增加存储。




